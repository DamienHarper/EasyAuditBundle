{"name":"Easy Audit Bundle","tagline":"A Symfony2 Bundle To Log Selective Events","body":"Easy Audit\r\n==========\r\n[![Build Status](https://travis-ci.org/xiidea/EasyAuditBundle.png?branch=master)](https://travis-ci.org/xiidea/EasyAuditBundle)\r\n[![HHVM Status](http://hhvm.h4cc.de/badge/xiidea/easy-audit.svg)](http://hhvm.h4cc.de/package/xiidea/easy-audit)\r\n[![Coverage Status](https://coveralls.io/repos/xiidea/easy-audit/badge.png?branch=master)](https://coveralls.io/r/xiidea/easy-audit?branch=master)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/xiidea/easy-audit/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/xiidea/easy-audit/?branch=master)\r\n[![Latest Stable Version](https://poser.pugx.org/xiidea/easy-audit/v/stable.png)](https://packagist.org/packages/xiidea/easy-audit)\r\n[![Total Downloads](https://poser.pugx.org/xiidea/easy-audit/downloads.png)](https://packagist.org/packages/xiidea/easy-audit)\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/b8802bf0-af10-4343-a6c4-846d6b481978/mini.png)](https://insight.sensiolabs.com/projects/b8802bf0-af10-4343-a6c4-846d6b481978)\r\n[![knpbundles.com](http://knpbundles.com/xiidea/easy-audit/badge-short)](http://knpbundles.com/xiidea/easy-audit)\r\n\r\n\r\nA Symfony2 Bundle To Log Selective Events. It is easy to configure and easy to customize for your need.\r\n\r\n**Note:** If you are using **Symfony** version **older then 2.4** you need to use [EasyAuditBundle 1.2.x](https://github.com/xiidea/easy-audit/tree/1.2.x)\r\n\r\nInstall\r\n-------\r\n1. Add EasyAuditBundle in your composer.json\r\n2. Enable the Bundle\r\n3. Create audit_log entity class\r\n4. Configure config.yml\r\n5. Update Database Schema\r\n\r\n### 1. Add EasyAuditBundle in your composer.json\r\n\r\nAdd EasyAuditBundle in your composer.json:\r\n\r\n```js\r\n{\r\n    \"require\": {\r\n        \"xiidea/easy-audit\": \"1.3.*@dev\"\r\n    }\r\n}\r\n```\r\n\r\nNow tell composer to download the bundle by running the command:\r\n\r\n``` bash\r\n$ php composer.phar update xiidea/easy-audit\r\n```\r\n\r\nComposer will install the bundle to your project's `vendor/xiidea` directory.\r\n\r\n### 2. Enable the Bundle\r\n\r\n``` php\r\n<?php\r\n// app/AppKernel.php\r\n\r\npublic function registerBundles()\r\n{\r\n    $bundles = array(\r\n        // ...\r\n        new Xiidea\\EasyAuditBundle\\XiideaEasyAuditBundle(),\r\n    );\r\n}\r\n```\r\n\r\n### 3. Create audit_log entity class\r\n\r\nThe XiideaEasyAuditBundle supports Doctrine ORM by default. However, you must provide a concrete AuditLog class. Follow the [instructions](https://github.com/xiidea/easy-audit/blob/master/Resources/doc/audit-log-entity-orm.md) to set up the class:\r\n\r\n\r\n### 4. Configure config.yml\r\n\r\nYou can find sample config data in `Resources/config/config-sample.yml` file\r\n\r\n``` yaml\r\n# app/config/config.yml\r\nxiidea_easy_audit:\r\n    #resolver: xiidea.easy_audit.default_event_resolver        #Optional\r\n    #logger: xiidea.easy_audit.logger.service                  #Optional\r\n    entity_class : MyProject\\MyBundle\\Entity\\AuditLog          #Required\r\n\r\n    #user property to use as actor of an event\r\n    #valid value will be any valid property of your user class\r\n    user_property : ~ # or username                            #Optional\r\n\r\n    #List of doctrine entity:event you wish to track or set to false to disable logs for doctrine events\r\n    # valid events are = [created, updated, deleted]\r\n    #doctrine_entities :                                              #Optional\r\n    #     MyProject\\Bundle\\MyBundle\\Entity\\MyEntity : [created, updated, deleted]\r\n    #     MyProject\\Bundle\\MyBundle\\Entity\\MyEntity2 : ~\r\n\r\n    #List all events you want to track  (Optional from v1.2.1 you can now use subscriber to define it)\r\n    events :                                                   #Optional\r\n        - security.interactive_login\r\n\r\n    #List all custom resolver for event\r\n    #custom_resolvers :\r\n    #       security.interactive_login : user.event_resolver\r\n    #       security.authentication.failure : user.event_resolver\r\n\r\n    #logger_chanel:\r\n    #    xiidea.easy_audit.logger.service: [\"info\", \"debug\"]\r\n    #    file.logger: [\"!info\", \"!debug\"]\r\n\r\n    #Custom Event Resolver Service\r\nservices:\r\n    #user.event_resolver:\r\n    #     class: Xiidea\\EasyAuditBundle\\Resolver\\UserEventResolver\r\n    #     calls:\r\n    #        - [ setContainer,[ @service_container ] ]\r\n```\r\n\r\n### 5. Update Database Schema\r\n\r\nAs all setup done, now you need to update your database schema. To do so,run the following command from your project directory\r\n``` bash\r\n$ php app/console doctrine:schema:update --force\r\n```\r\n\r\nCore Concepts\r\n-------------\r\n\r\n#### Logger:\r\n\r\n`Logger` is the core service which are responsible for persist the event info. You can define as many logger as you like.\r\nEasyAudit Bundled with a logger service `xiidea.easy_audit.logger.service` which is the default logger service. You can easily\r\noverride the service and define your own service as a default logger.\r\n\r\n#### Resolver:\r\n`Resolver` is like translator for an event. It used to translate an event to AuditLog entity. EasyAudit bundled with two(2)\r\nresolver services `xiidea.easy_audit.default_event_resolver`, `xiidea.easy_audit.default_entity_event_resolver`. And a\r\ncustom EventResolver class `UserEventResolver` to illustrate how the transformation works. You can define as many resolver\r\nservice as you want and use them to handle different event. Here is the place you can set the severity level for a event. Default\r\nlevel is `Psr\\Log\\LogLevel::INFO`. Custom severity levels are not available. EasyAudit supports the logging levels\r\ndescribed by [PSR-3](http://www.php-fig.org/psr/psr-3). These values are present for basic filtering purposes. You can\r\nuse this value as chanel to register different logger to handle different event. If you add any other field to your\r\nAuditLog object, this is the place to add those extra information (tags, metadata, etc..)\r\n\r\n#### Chanel\r\nIt is now possible to register logger for specific chanel. chanel is refers to log level. you can configure EasyAudit logger\r\nservices to handle only specific level of event.\r\n\r\nWarning - BC Breaking Changes\r\n-----------------------------\r\n\r\n* Since v1.2.2 `pre_persist_listener` option has been removed. You can use [this cookbook](https://github.com/xiidea/easy-audit/blob/master/Resources/doc/pre-persist-listener.md) to achieve the same functionality \r\n* Since v1.2.2 `EventResolverInterface` been split into `EmbeddedEventResolverInterface` and `EventResolverInterface`\r\n* Since v1.3.x The new Event object has been adapted. And the signature of `EmbeddedEventResolverInterface` and \r\n  `EventResolverInterface` also changed. Now it expects extra $eventName parameter     \r\n\r\n\r\nCookbook\r\n--------\r\n\r\nLook the cookbook for another interesting things.\r\n\r\n- [Embed Resolver with event](https://github.com/xiidea/easy-audit/blob/master/Resources/doc/embed-resolver.md)\r\n- [Define events with subscriber](https://github.com/xiidea/easy-audit/blob/master/Resources/doc/subscriber.md)\r\n- [Override Resolver](https://github.com/xiidea/easy-audit/blob/master/Resources/doc/override-resolver.md)\r\n- [Custom Logger](https://github.com/xiidea/easy-audit/blob/master/Resources/doc/custom-logger.md)\r\n- [Custom Resolver](https://github.com/xiidea/easy-audit/blob/master/Resources/doc/custom-resolver.md)\r\n- [Doctrine Entity Event](https://github.com/xiidea/easy-audit/blob/master/Resources/doc/doctrine-entity-events.md)\r\n- [Pre-Persist Listener](https://github.com/xiidea/easy-audit/blob/master/Resources/doc/pre-persist-listener.md)\r\n- [Logger Chanel](https://github.com/xiidea/easy-audit/blob/master/Resources/doc/logger-chanel.md)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}